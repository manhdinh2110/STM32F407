#include "lcd.h"


 /********************************************************************************************
 ******                            Public Function                                      ******
 ********************************************************************************************/
 /**/

 /**
 ** Initialization LCD 16x2
 **/
void Lcd_Init(void)
{

  // delay_1ms(30);
   PIN_LOW(D4_PORT,D4_PIN);
   PIN_HIGH(D5_PORT,D5_PIN);
   PIN_LOW(D6_PORT,D6_PIN);
   PIN_LOW(D7_PORT,D7_PIN);
   PIN_LOW(RS_PORT,RS_PIN);

   PIN_HIGH(EN_PORT,EN_PIN);
   PIN_LOW(EN_PORT,EN_PIN);

   lcd_write(0,0x28);
   lcd_write(0,0x0c);
   lcd_write(0,0x06);
   lcd_write(0,0x01);
}




/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * *                                  Static function definition                                * * *
* * *                                           NO USE                                           * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

void lcd_configure(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	// GPIO clock for control and data lines

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA ,ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB ,ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE ,ENABLE);

	// Configure RS_PIN
	GPIO_InitStruct.GPIO_Pin = RS_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP ;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_High_Speed;
	GPIO_Init(RS_PORT,&GPIO_InitStruct);

		// Configure EN_PIN
	GPIO_InitStruct.GPIO_Pin = EN_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP ;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_High_Speed;
	GPIO_Init(EN_PORT,&GPIO_InitStruct);




	// Configure D4_PIN
	GPIO_InitStruct.GPIO_Pin = D4_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP ;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_High_Speed;
	GPIO_Init(D4_PORT,&GPIO_InitStruct);

	// Configure D5_PIN
	GPIO_InitStruct.GPIO_Pin = D5_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_High_Speed;
	GPIO_Init(D5_PORT,&GPIO_InitStruct);

	// Configure D6_PIN
	GPIO_InitStruct.GPIO_Pin = D6_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP ;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_High_Speed;
	GPIO_Init(D6_PORT,&GPIO_InitStruct);

	// Configure D7_PIN
	GPIO_InitStruct.GPIO_Pin = D7_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP ;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_High_Speed;
	GPIO_Init(D7_PORT,&GPIO_InitStruct);

}


void lcd_write(uint8_t type,uint8_t data)
{
 //  delay_1ms(2);
   if(type)
   {
      PIN_HIGH(RS_PORT,RS_PIN);
   }else
   {
      PIN_LOW(RS_PORT,RS_PIN);
   }

   //Send High Nibble
   if(data&0x80)
   {
      PIN_HIGH(D7_PORT,D7_PIN);
   }else
   {
      PIN_LOW(D7_PORT,D7_PIN);
   }

   if(data&0x40)
   {
      PIN_HIGH(D6_PORT,D6_PIN);
   }else
   {
      PIN_LOW(D6_PORT,D6_PIN);
   }

   if(data&0x20)
   {
      PIN_HIGH(D5_PORT,D5_PIN);
   }else
   {
      PIN_LOW(D5_PORT,D5_PIN);
   }

   if(data&0x10)
   {
      PIN_HIGH(D4_PORT,D4_PIN);
   }else
   {
      PIN_LOW(D4_PORT,D4_PIN);
   }
   PIN_HIGH(EN_PORT,EN_PIN);
   PIN_LOW(EN_PORT,EN_PIN);


   //Send Low Nibble
   if(data&0x08)
   {
      PIN_HIGH(D7_PORT,D7_PIN);
   }else
   {
      PIN_LOW(D7_PORT,D7_PIN);
   }

   if(data&0x04)
   {
      PIN_HIGH(D6_PORT,D6_PIN);
   }else
   {
      PIN_LOW(D6_PORT,D6_PIN);
   }

   if(data&0x02)
   {
      PIN_HIGH(D5_PORT,D5_PIN);
   }else
   {
      PIN_LOW(D5_PORT,D5_PIN);
   }

   if(data&0x01)
   {
      PIN_HIGH(D4_PORT,D4_PIN);
   }else
   {
      PIN_LOW(D4_PORT,D4_PIN);
   }
   PIN_HIGH(EN_PORT,EN_PIN);
   PIN_LOW(EN_PORT,EN_PIN);
}

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
   //Set Cursor Position
   #ifdef LCD16xN   //For LCD16x2 or LCD16x4
   switch(x)
   {
      case 0: //Row 0
         lcd_write(0,0x80+0x00+y);
         break;
      case 1: //Row 1
         lcd_write(0,0x80+0x40+y);
         break;
      case 2: //Row 2
         lcd_write(0,0x80+0x10+y);
         break;
      case 3: //Row 3
         lcd_write(0,0x80+0x50+y);
         break;
   }
   #endif

   #ifdef LCD20xN   //For LCD20x4
   switch(x)
   {
      case 0: //Row 0
         lcd_write(0,0x80+0x00+y);
         break;
      case 1: //Row 1
         lcd_write(0,0x80+0x40+y);
         break;
      case 2: //Row 2
         lcd_write(0,0x80+0x14+y);
         break;
      case 3: //Row 3
         lcd_write(0,0x80+0x54+y);
         break;
   }
   #endif

   while(*string)
   {
      lcd_write(1,*string);
      string++;
   }
}
void lcd_clear(void)
{
   lcd_write(0,0x01);
}



